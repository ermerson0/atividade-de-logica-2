def calcular_mdc(a, b):
    while b != 0:
        a, b = b, a % b
    return a

def calcular_mmc(a, b, mdc):
    return (a * b) // mdc

def calcular_mdc_mmc():

    a = int(input("Digite o primeiro n√∫mero: "))
    b = int(input("Digite o segundo n√∫mero: "))


    mdc = calcular_mdc(a, b)


    mmc = calcular_mmc(a, b, mdc)


    print(f"MDC({a}, {b}) = {mdc}")
    print(f"MMC({a}, {b}) = {mmc}")

calcular_mdc_mmc()

#Explica√ß√£o das perguntas

#algoritmo de Euclides (MDC): Este algoritmo funciona com base na ideia de que o MDC de dois n√∫meros n√£o muda se o maior n√∫mero for substitu√≠do pelo resto da divis√£o entre eles.
#Isso √© repetido at√© que o resto seja zero, e o √∫ltimo divisor √© o MDC.

##Esse Algoritmo Funciona para Todos os Casos?
#Sim, este algoritmo funciona para todos os pares de n√∫meros inteiros positivos e zero, com algumas considera√ß√µes:
#Se qualquer um dos n√∫meros for zero, o MDC √© o valor absoluto do outro n√∫mero (por exemplo, MDC(0, ùëè ) = ùëè MDC(0,b)=b).
#Se ambos os n√∫meros forem zero, o MDC n√£o est√° bem definido. Neste caso, o algoritmo precisaria de um tratamento especial.
#O MMC √© indefinido se qualquer um dos n√∫meros for zero, pois o zero n√£o tem m√∫ltiplos.


#Como Verificar a Comprova√ß√£o para Todos os Casos de Testes Poss√≠veis?
#Para verificar se o algoritmo funciona para todos os casos poss√≠veis, podemos: Fazer teste de unidades e Testar Limites.
